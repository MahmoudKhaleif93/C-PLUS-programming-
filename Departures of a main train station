#include <iostream>
#include<iomanip>
using namespace std;
/// Class 1 
class Time {

private :
    int minuteofday ;
public :
   //over loaded constructor with an unsigned paratmeter
   Time()
   {
       minuteofday =0;
   }
     Time(unsigned int m  )
     {

         m=minuteofday ;
         if (m >=1440)
        {
       minuteofday = m % 1440 ;
        }
     }
    ///over loaded constructor with two parameters hour and minute
    Time(int hour , int minute )
    {
    set_time(hour , minute);

    }
    /// function to calculateing the minutes and assigne it into the attribute .
void set_time(int hour , int minute )
{
    minuteofday = hour * 60 + minute ;
}
/// public func to get the hour .
unsigned int  get_hour ()
{
    int hour= 0 ;
    hour = minuteofday / 60 ;
    return hour ;
}
///public method to get the minutes
unsigned int get_minute ()
{
    int minute ;

    minute = minuteofday % 60 ;

    return minute ;
}
//public method to get the minutes of the day .

unsigned int get_minuteofday()
{
    return minuteofday ;
}
///over loaded member operator to increase the time by the value of minutes

};
Time operator+(Time& x , unsigned int k  ) // binary operator +
{
    Time z(x.get_minuteofday() + k );

	return z ;
}


///over loaded operator
istream& operator>>( istream& in ,  Time& inputted_time)
{
    unsigned int h , m  ;
    char l ;
//   cin.ignore(in , '');
   inputted_time.set_time(h,m) ;
   cin>> h ;
   l= getchar();
    cin>> m ;
   if(l== ':')
   {
       inputted_time.set_time( h, m );
   }
   else {

    cout<< "false inputted type  : " ;

   }
}

ostream& operator<<( ostream& out ,  Time& n )
{
   out << setw(2) << setfill(' ') << n.get_hour()<<":" <<setw(2) << setfill(' ') << n.get_minute() ;


}
//Class train 
class Train {

private:
    string no ;
    string to ;
    string over ;
public :
    Train(string, string , string  );
    ~Train();
string get_no ();
string get_to();
string get_over ();


};

Train::Train(string n , string t , string o )
{
    no =n ;
    to = t ;
    over= o ;

}
Train::~Train()
{
      cout << setw(10) << setfill(' ') << "  "<<get_no() <<setw(10) << setfill(' ') << "   "<<get_over()<<setw(10) << setfill(' ')<< get_to()<< " deleted "<< endl ;

}
string Train::get_no ()
{
    return no ;
}
string Train::get_to()
{
    return to ;

}
string Train::get_over()
{
    return over ;
}
///class Station
class Station {

private:
    const string station ;
/// const class attribute of unsigned integer
    const unsigned int   platforms = 15 ;
/// two dimensional array
Train *schedule  [24*60][15];
public:

Station (string k  ):station(k)
{
for(int i = 0 ; i < 1440 ; i ++ ){
    for(int j = 0; j<platforms ; j++ )
    {
        schedule [i][j]= nullptr ;
        }
}
}
~Station ()
{
for(int i = 0 ; i < 1440 ; i++ ){
    for(int j = 0; j<platforms ; j++ ){
        if (schedule[i][j] != nullptr )
        {
            Time s(i);
            cout << s << setfill(' ') << setw(5)<<"   platform : "<<  1+j;
            schedule[i][j]->~Train();
        }

    }
}

}
void addDepature (Time &y , int p , Train *t )
{
    p=p-1;
    schedule[y.get_minuteofday()][p]=t;

}
void showDeparture (Time time ,unsigned int minutes )
{
 Time time1 ;
cout << "main station duisburg " << endl ;
cout << "departures" << time ;
time1 = time+minutes ;
cout<<time1<<endl<<"=========================="<<endl;
cout<< "Time " << setw(5) << "Train" << setw(5)<< "Over" <<setw(15) << "to "<< setw(5)<< "platform " << endl;
for(int i = time.get_minuteofday() ; i < time1.get_minuteofday() ; i ++ ){
    for(int j = 0; j<platforms ; j++ ){

        if (schedule[i][j] != nullptr )
        {
            Time s(i);
            cout <<s << setfill(' ') << setw(10 )<< schedule[i][j]->get_no() << setfill(' ') <<setw(5) << schedule[i][j]->get_over() << setfill(' ')<< setw(15)<<schedule[i][j]->get_to() << setfill(' ')<< setw(5)<<platforms << endl;
        }

    }
}


}


};
int main()
{
    Station duisburg("Duisburg HBF");
    string Strain1 ,strain1 ,strain2,  Retrain1 , Retrain2 , to  ;
    Strain1="Mulheim (Ruhr)styrum - Mulheim(Ruhr) - Essen";
    strain1="Duisburg-Schlenk - Dusseldorf Flughafen  ";
    Retrain1="Dusseldorf Flughafen - Dusseldorf - Koln " ;
    Retrain2="Mulheim(Ruhr) - Essen - Gelsenkirchen  ";
    strain2="Oberhausen - Gelsenkirchen - Wanne-Eikel         ";

    to ="Dortmund Hbf";
    to = "Solingen Hbf";
    to=  "Aachen Hbf" ;
    to = "Munster Hbf";
    to = "Dortmund Hbf " ;

for(int m=0;m<1440;m = m + 20)
    {
        Time t(m);
        Train *S1=new Train("s1",to,Strain1);
        duisburg.addDepature(t , 9 , S1);

    }
for(int m=0;m<1440;m = m + 20)

{
     Time t(m);
     Train *s1 =new Train ("s1" , to , strain1 );
     duisburg.addDepature(t , 5 , s1);

}
    for(int m=0;m<1440;m = m + 60)
    {
    Time t(m);
    Train *RE1 =new Train ("RE1" , to , Retrain1 );
    duisburg.addDepature(t , 2 , RE1);
    }
for(int m=0;m<1440;m = m + 60)
{
     Time t(m);
     Train *RE2 =new Train ("RE2" , to , Retrain2 );
    duisburg.addDepature(t, 4 , RE2);
}
for(int m=0;m<1440;m = m + 60)
{
    Time t(m);
    Train *S2 =new Train ("S2" , to , strain2 );
    duisburg.addDepature(t , 10 , S2);
    }

   int f ;

   do {

    cout << "0 end "<< endl;
    cout << "1 schedule train  : " <<endl;
    cout << "2 show Schedule  : " << endl ;
    cin>>f;
    switch(f)
    {

    case 0 : break ;

    case 1:
           {

    Time t;
    unsigned int platform ;
    string name , to , over ;
    cout<< "enter time : " ;
    cin>> t;
    cout << "enter platform number : " ;
    cin>> platform ;
    cout << "enter train name : " ;
    cin>> name;
    cout << "to : ";
    cin>> to;
    cout<< "over: ";
    cin.ignore();
    getline(cin,over);
    Train *l=new Train(name , over , to );
    duisburg.addDepature(t , platform , l );
    break ;
    }
    case 2 :
        {
    int l , m;
    cout << "show departures starting at ? " ;
    cin >> l ;
    cout<< "for how many next minutes ";
    cin>> m ;
    cout<< "Duisburg main Station " ;
    cout << "departures" << time   ;
     break;
      }

    default : cout << "wrong entry " << endl;

   }}while ( f != 0);

    return 0;
}
